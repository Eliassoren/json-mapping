default:
  image: maven:3.5.3-jdk-8
  before_script:
    - export PATH=$JAVA_HOME/bin:$PATH
    - |
      if [ ! -d ".m2" ]
      then
        mkdir .m2
      fi
    - echo $MVN_SETTINGS > .m2/settings.xml
    - export MAVEN_CLI_OPTS="-s .m2/settings.xml --batch-mode"
    - export MAVEN_OPTS="-Dmaven.repo.local=.m2/repository"

stages:
  - build
  - security
  - test
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository/
    - target/classes/

build:
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS clean compile
  only:
    - merge_request
    - master
    - $JOB_TYPE == "DAILY_PIPELINE"
  except:
    variables:
      - $CI_MERGE_REQUEST_TITLE =~ /^WIP:.*/

security:
  stage: security
  dependencies:
    - build
  script:
    - mvn $MAVEN_CLI_OPTS spotbugs:spotbugs
    - mvn $MAVEN_CLI_OPTS spotbugs:check
  allow_failure: true
  artifacts:
    when: always
    paths:
      - target/spotbugsXml.xml
  only:
    - merge_request
    - master
    - $JOB_TYPE == "DAILY_PIPELINE"
  except:
    variables:
      - $CI_MERGE_REQUEST_TITLE =~ /^WIP:.*/


test:
  stage: test
  dependencies:
    - build
  script:
    - mvn $MAVEN_CLI_OPTS test
  only:
    - merge_request
    - master
    - $JOB_TYPE == "DAILY_PIPELINE"
  except:
    variables:
      - $CI_MERGE_REQUEST_TITLE =~ /^WIP:.*/

deploy:
  stage: deploy
  dependencies:
    - test
  script:
    - git config user.email "nomail@kantega.no"
    - git config user.name "GitLab CI"
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GITLAB_DEPLOY_KEY")
    - mkdir -p ~/.ssh
    - pwd
    - cat .m2/settings.xml
    - mv .m2 /root
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git checkout -B "$CI_RELEASE_BRANCH" # mvn release doesn't work on detached.
    - mvn $MAVEN_CLI_OPTS -Dresume=false release:prepare release:perform
  only:
    - master



